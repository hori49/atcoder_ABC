# AtCoder ABC Contest #175 C
# 数直線を使った問題の解き方

"""
[ 問題文 ]
数直線上で暮らす高橋君は、今座標 X にいます。これから高橋君はちょうど K 回、
座標の正または負の方向に D 移動する行為を繰り返そうと考えています。

より正確には、1 回の移動では 座標 x から x + D または x - D に移動できます。

高橋君は、ちょうど K 回移動した後にいる座標の絶対値が最小となるように移動したいです。

K 回の移動後の座標の絶対値としてあり得る値の最小値を求めてください。

[ 制約 ]
-10^15 ≤ X ≤ 10^15
1 ≤ K ≤ 10^15
1 ≤ D ≤ 10^15
入力は全て整数である

[ 入力 ]
入力は以下の形式で標準入力から与えられる。
X K D

[ 出力 ]
K 回の移動後の座標の絶対値としてあり得る値の最小値を出力せよ。
"""

def main():
    X, K, D = map(int, input().split())

    # すべての移動が +D または -D のどちらかの場合
    if (X <= 0 and X+(K*D) <= 0):
        print(abs(X+(K*D)))
        exit()
    elif (X > 0 and X-(K*D) >= 0):
        print(X-(K*D))
        exit()

    # +D と -D の両方の移動が含まれる場合
        # 何回目の移動で０を超えるかを調べる。
    num_div = abs(X) / D # 小数点を含む数字になる場合がある。

    if (isinstance(num_div, int)):  # K回以内の移動でXの座標が丁度0になる移動回数がある場合
        if ((K - num_div) % 2 == 0):
            print(0)
            exit()
        else:
            print(D)
    else:  # K回以内の移動でXの座標が丁度0になる移動回数がない場合
        if (int(num_div) == 0):
            num_div = 0
            if (K % 2 == 0):
                print(abs(X))
            else:
                print(min(abs(X - D), abs(X + D)))
            exit()
        if (float(abs(X) / (int(num_div) + 1)) - float(abs(X) / (int(num_div))) >= 0 ):  # 0を跨いで移動した場合のが絶対値が小さくなる場合
            num_div = int(num_div) + 1
        else:  # 0を跨がないで移動した場合のが絶対値が小さくなる場合
            num_div = int(num_div)

        if ((K - num_div) % 2 == 0):
            print(abs(abs(X) - (num_div * D)))
            exit()
        else:
            print(abs(min(abs(X) - ((num_div + 1) * D), abs(X) - ((num_div - 1) * D))))
            exit()


if __name__ == '__main__':
    main()


"""
[ 入力例 1 ]
6 2 4
[ 出力例 1 ]
2

高橋君は、今座標 6 にいます。次のように移動するのが最適です。
    6 から (6-4=) 2 に移動する。
    2 から (2-4=) -2 に移動する。
移動後の座標の絶対値は 2 で、これより小さくすることはできません。

[ 入力例 2 ]
7 4 3
[ 出力例 2 ]
1

高橋君は、今座標 7 にいます。例えば次のように移動するのが最適です。
    7 から 4 に移動する。
    4 から 7 に移動する。
    7 から 4 に移動する。
    4 から 1 に移動する。
移動後の座標の絶対値は 1 で、これより小さくすることはできません。

[ 入力例 3 ]
10 1 2
[ 出力例 3 ]
8

[ 入力例 4 ]
1000000000000000 1000000000000000 1000000000000000
[ 出力例 4 ]
1000000000000000

[ Test Case 08 ]
358872858893379 962118911597026 557821423997828
[Expected Output 08]
358872858893379

[ Test Case 18 ]
-909422713872794 570316816354646 974573953279746
[Expected Output 18]
909422713872794
"""